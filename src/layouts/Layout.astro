---
import '../styles/global.css';
import { ViewTransitions } from 'astro:transitions';
import Footer from '../components/Footer.astro';

export interface Props {
	title?: string;
}

const { title = "Shoreline Web Solutions - Professional Web Development in Old Lyme, CT" } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Professional web development services in Old Lyme, Connecticut. Custom websites, performance optimization, and mobile-first design for businesses along the Connecticut shoreline." />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		
		<!-- View Transitions -->
		<ViewTransitions />
		
		<!-- Additional SEO meta tags -->
		<meta name="keywords" content="web development, Old Lyme CT, Connecticut web developer, responsive design, custom websites" />
		<meta name="author" content="Shoreline Web Solutions" />
		
		<!-- Open Graph tags -->
		<meta property="og:title" content={title} />
		<meta property="og:description" content="Professional web development services in Old Lyme, Connecticut" />
		<meta property="og:type" content="website" />
		<meta property="og:url" content="https://shorelinewebsolutions.com" />
		
		<!-- Sitemap and SEO -->
		<link rel="sitemap" type="application/xml" href="/sitemap.xml" />
		<link rel="canonical" href="https://shorelinewebsolutions.com" />
		
		<!-- Preload critical fonts if you add any -->
		<!-- <link rel="preload" href="/fonts/your-font.woff2" as="font" type="font/woff2" crossorigin> -->
		
		<!-- Mobile-specific optimizations -->
		<meta name="mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="default" />
		<meta name="format-detection" content="telephone=no" />
		
		<!-- Force CSS refresh on mobile -->
		<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
		<meta http-equiv="Pragma" content="no-cache" />
		<meta http-equiv="Expires" content="0" />
		
	</head>
	<body class="antialiased">
		<slot />
		
		<!-- Footer -->
		<Footer />
		
		<script>
			function initAnimations() {
				const observerOptions = {
					threshold: 0.2,
					rootMargin: '0px 0px -100px 0px'
				};

				const observer = new IntersectionObserver((entries) => {
					entries.forEach((entry, index) => {
						if (entry.isIntersecting) {
							// Staggered animation for feature cards
							if (entry.target.classList.contains('feature-card')) {
								setTimeout(() => {
									entry.target.classList.add('animate');
								}, index * 200);
							} 
							// Staggered animation for gallery items
							else if (entry.target.classList.contains('gallery-item')) {
								setTimeout(() => {
									entry.target.classList.add('animate');
								}, index * 150);
							}
							// Regular animations
							else {
								entry.target.classList.add('animate');
							}
						}
					});
				}, observerOptions);

				// Observe section titles
				document.querySelectorAll('.section-title').forEach(el => observer.observe(el));

				// Observe feature cards
				document.querySelectorAll('.feature-card').forEach(el => observer.observe(el));

				// Observe gallery items
				document.querySelectorAll('.gallery-item').forEach(el => observer.observe(el));

				// Observe blog cards
				document.querySelectorAll('.blog-card').forEach(el => observer.observe(el));

				// Observe content sections
				document.querySelectorAll('.content-text, .content-visual, .cta-content').forEach(el => {
					observer.observe(el);
				});
			}

			// Magnetic effect for CTA button
			function initMagneticButton() {
				const button = document.querySelector('.magnetic-button') as HTMLElement;
				if (button) {
					button.addEventListener('mousemove', function(e: MouseEvent) {
						const rect = this.getBoundingClientRect();
						const x = e.clientX - rect.left - rect.width / 2;
						const y = e.clientY - rect.top - rect.height / 2;
						
						this.style.transform = `translateY(-5px) scale(1.05) translate(${x * 0.1}px, ${y * 0.1}px)`;
					});

					button.addEventListener('mouseleave', function() {
						this.style.transform = 'translateY(-5px) scale(1.05) translate(0px, 0px)';
					});
				}
			}

			// Smooth scrolling for navigation links
			function initSmoothScrolling() {
				document.querySelectorAll('a[href^="#"]').forEach(anchor => {
					anchor.addEventListener('click', function (this: HTMLAnchorElement, e: Event) {
						e.preventDefault();
						const target = document.querySelector(this.getAttribute('href') || '');
						if (target) {
							target.scrollIntoView({
								behavior: 'smooth',
								block: 'start'
							});
						}
					});
				});
			}

			// Initialize on page load
			document.addEventListener('DOMContentLoaded', () => {
				initAnimations();
				initMagneticButton();
				initSmoothScrolling();
			});
			
			// Re-initialize after Astro page transitions
			document.addEventListener('astro:page-load', () => {
				initAnimations();
				initMagneticButton();
				initSmoothScrolling();
			});
		</script>
	</body>
</html>